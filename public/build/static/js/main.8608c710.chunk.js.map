{"version":3,"sources":["components/Input.js","components/Button.js","components/Forecast.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Input","cityName","setCityName","setShowForecast","className","id","type","value","onChange","e","target","htmlFor","Button","name","onClick","FORECAST_QUERY","gql","Forecast","useQuery","variables","loading","error","data","console","log","CityWeather","main","weather","wind","currentDate","Date","toLocaleDateString","weekday","year","month","day","temp","src","icon","alt","description","Math","floor","humidity","speed","pressure","Footer","href","rel","client","ApolloClient","uri","cache","InMemoryCache","App","useState","undefined","showForecast","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8608c710.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Input({ cityName, setCityName, setShowForecast }) {\n  return (\n    <div className=\" input-field col s12 m9 l10\">\n      <input\n        id=\"cityInput\"\n        type=\"text\"\n        className=\"validate\"\n        value={cityName}\n        onChange={(e) => {\n          setCityName(e.target.value);\n          setShowForecast(false);\n        }}\n      />\n      <label htmlFor=\"cityInput\">Enter a city</label>\n    </div>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\n\nfunction Button({ setShowForecast }) {\n  return (\n    <div className=\"btn-wrapper col s12 m3 l2\">\n      <button\n        className=\"btn waves-effect waves-light\"\n        type=\"submit\"\n        name=\"action\"\n        onClick={() => {\n          setShowForecast(true);\n        }}\n      >\n        Submit\n        <i className=\"material-icons right\">cloud</i>\n      </button>\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { WiHumidity } from \"react-icons/wi\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\nimport { BsWind, BsSpeedometer } from \"react-icons/bs\";\n\n//\nconst FORECAST_QUERY = gql`\n  query CityWeatherQuery($cityName: String!) {\n    CityWeather(name: $cityName) {\n      name\n      main {\n        temp\n        humidity\n        feels_like\n        pressure\n      }\n      weather {\n        main\n        icon\n        description\n      }\n      wind {\n        speed\n      }\n    }\n  }\n`;\n\nconst Forecast = ({ cityName, setShowForecast }) => {\n  const { loading, error, data } = useQuery(FORECAST_QUERY, {\n    variables: { cityName },\n  });\n\n  if (loading) {\n    return <h3>Loading...</h3>;\n  }\n  if (error) {\n    console.log(error);\n    return <h3>Error...! {error}</h3>;\n  }\n\n  if (data.CityWeather.name !== null) {\n    const main = data.CityWeather.main;\n    const weather = data.CityWeather.weather[0];\n    const wind = data.CityWeather.wind;\n    const currentDate = new Date().toLocaleDateString(\"en-GB\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n\n    return (\n      <div className={`forecast-container ${main.temp > 16 ? \"warm\" : \"cold\"}`}>\n        <div className=\"degree-wrapper\">\n          <time className=\"current-time\">{currentDate}</time>\n\n          <h4>\n            <img\n              className=\"weather-icon\"\n              src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n              alt=\"weather-icon\"\n            />\n            {weather.main}\n          </h4>\n          <span>{weather.description}</span>\n          <h2>{data.CityWeather.name}</h2>\n          <h1>\n            {\" \"}\n            {Math.floor(main.temp)}\n            {\"\\u00b0\"}\n          </h1>\n        </div>\n        <div className=\"details-wrapper\">\n          <div className=\"detail-box\">\n            <WiHumidity className=\"detail-icon\" />\n            <p>humidity</p>\n            <h4>{main.humidity} %</h4>\n          </div>\n          <div className=\"detail-box\">\n            <FaTemperatureHigh className=\"detail-icon\" />\n            <p>Feels like</p>\n            <h4>\n              {Math.floor(main[\"feels_like\"])} {\"\\u00b0\"}\n            </h4>\n          </div>\n\n          <div className=\"detail-box\">\n            <BsWind className=\"detail-icon\" />\n            <p>Wind</p>\n            <h4>{wind.speed} m/s</h4>\n          </div>\n          <div className=\"detail-box\">\n            <BsSpeedometer className=\"detail-icon\" />\n            <p>Pressure</p>\n            <h4>{main.pressure} hPa</h4>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return <h3>city not found</h3>;\n};\n\nexport default Forecast;\n","import React from \"react\";\nimport { BsGithub, BsLinkedin } from \"react-icons/bs\";\n\nconst Footer = () => {\n  return (\n    <section className=\"footer-container row\">\n      <div className=\"col l6 s12\">\n        <ul>\n          <li>{\"\\u00a9\"} Copyright 2022 - brkzmn</li>\n        </ul>\n      </div>\n      <div className=\"col l6 s12\">\n        <ul className=\"contact-wrapper\">\n          <li>\n            <a\n              href=\"https://www.linkedin.com/in/burak-%C3%B6zmen/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <BsLinkedin />\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://github.com/brkzmn\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <BsGithub />\n            </a>\n          </li>\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nexport default Footer;\n","import Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport { GrGraphQl } from \"react-icons/gr\";\n\nimport \"./App.css\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport Forecast from \"./components/Forecast\";\nimport Footer from \"./components/Footer\";\nimport { useState } from \"react\";\n// import { set } from \"express/lib/application\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [cityName, setCityName] = useState(undefined);\n  const [showForecast, setShowForecast] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <div className=\"logo\">\n          <h1 className=\"logo-title\">HackYourTemperature-GraphQL</h1>\n          <GrGraphQl className=\"logo-icon\" />\n        </div>\n        <div className=\"weather-container\">\n          <div\n            className={`row input-container ${showForecast ? \"up\" : \"down\"}`}\n          >\n            <Input\n              cityName={cityName}\n              setCityName={setCityName}\n              setShowForecast={setShowForecast}\n            />\n            <Button setShowForecast={setShowForecast} />\n          </div>\n\n          {showForecast && (\n            <Forecast cityName={cityName} setShowForecast={setShowForecast} />\n          )}\n        </div>\n        <Footer />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}